# Generated by the gRPC-distributed-dataframe Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Worker_pb2 as Worker__pb2


class WorkerAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.read_csv = channel.unary_unary(
                '/WorkerAPI/read_csv',
                request_serializer=Worker__pb2.Url.SerializeToString,
                response_deserializer=Worker__pb2.EmptyWorker.FromString,
                )
        self.apply = channel.unary_unary(
                '/WorkerAPI/apply',
                request_serializer=Worker__pb2.Func.SerializeToString,
                response_deserializer=Worker__pb2.Dataframe.FromString,
                )
        self.columns = channel.unary_unary(
                '/WorkerAPI/columns',
                request_serializer=Worker__pb2.EmptyWorker.SerializeToString,
                response_deserializer=Worker__pb2.Index.FromString,
                )
        self.groupby = channel.unary_unary(
                '/WorkerAPI/groupby',
                request_serializer=Worker__pb2.By.SerializeToString,
                response_deserializer=Worker__pb2.Dataframe.FromString,
                )
        self.head = channel.unary_unary(
                '/WorkerAPI/head',
                request_serializer=Worker__pb2.N.SerializeToString,
                response_deserializer=Worker__pb2.Dataframe.FromString,
                )
        self.isin = channel.unary_unary(
                '/WorkerAPI/isin',
                request_serializer=Worker__pb2.Values.SerializeToString,
                response_deserializer=Worker__pb2.Dataframe.FromString,
                )
        self.items = channel.unary_unary(
                '/WorkerAPI/items',
                request_serializer=Worker__pb2.EmptyWorker.SerializeToString,
                response_deserializer=Worker__pb2.Items.FromString,
                )
        self.max = channel.unary_unary(
                '/WorkerAPI/max',
                request_serializer=Worker__pb2.Axis.SerializeToString,
                response_deserializer=Worker__pb2.Series.FromString,
                )
        self.min = channel.unary_unary(
                '/WorkerAPI/min',
                request_serializer=Worker__pb2.Axis.SerializeToString,
                response_deserializer=Worker__pb2.Series.FromString,
                )


class WorkerAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def read_csv(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def apply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def columns(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def groupby(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def head(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def items(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def max(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def min(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'read_csv': grpc.unary_unary_rpc_method_handler(
                    servicer.read_csv,
                    request_deserializer=Worker__pb2.Url.FromString,
                    response_serializer=Worker__pb2.EmptyWorker.SerializeToString,
            ),
            'apply': grpc.unary_unary_rpc_method_handler(
                    servicer.apply,
                    request_deserializer=Worker__pb2.Func.FromString,
                    response_serializer=Worker__pb2.Dataframe.SerializeToString,
            ),
            'columns': grpc.unary_unary_rpc_method_handler(
                    servicer.columns,
                    request_deserializer=Worker__pb2.EmptyWorker.FromString,
                    response_serializer=Worker__pb2.Index.SerializeToString,
            ),
            'groupby': grpc.unary_unary_rpc_method_handler(
                    servicer.groupby,
                    request_deserializer=Worker__pb2.By.FromString,
                    response_serializer=Worker__pb2.Dataframe.SerializeToString,
            ),
            'head': grpc.unary_unary_rpc_method_handler(
                    servicer.head,
                    request_deserializer=Worker__pb2.N.FromString,
                    response_serializer=Worker__pb2.Dataframe.SerializeToString,
            ),
            'isin': grpc.unary_unary_rpc_method_handler(
                    servicer.isin,
                    request_deserializer=Worker__pb2.Values.FromString,
                    response_serializer=Worker__pb2.Dataframe.SerializeToString,
            ),
            'items': grpc.unary_unary_rpc_method_handler(
                    servicer.items,
                    request_deserializer=Worker__pb2.EmptyWorker.FromString,
                    response_serializer=Worker__pb2.Items.SerializeToString,
            ),
            'max': grpc.unary_unary_rpc_method_handler(
                    servicer.max,
                    request_deserializer=Worker__pb2.Axis.FromString,
                    response_serializer=Worker__pb2.Series.SerializeToString,
            ),
            'min': grpc.unary_unary_rpc_method_handler(
                    servicer.min,
                    request_deserializer=Worker__pb2.Axis.FromString,
                    response_serializer=Worker__pb2.Series.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def read_csv(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/read_csv',
            Worker__pb2.Url.SerializeToString,
            Worker__pb2.EmptyWorker.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/apply',
            Worker__pb2.Func.SerializeToString,
            Worker__pb2.Dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def columns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/columns',
            Worker__pb2.EmptyWorker.SerializeToString,
            Worker__pb2.Index.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def groupby(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/groupby',
            Worker__pb2.By.SerializeToString,
            Worker__pb2.Dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def head(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/head',
            Worker__pb2.N.SerializeToString,
            Worker__pb2.Dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/isin',
            Worker__pb2.Values.SerializeToString,
            Worker__pb2.Dataframe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def items(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/items',
            Worker__pb2.EmptyWorker.SerializeToString,
            Worker__pb2.Items.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def max(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/max',
            Worker__pb2.Axis.SerializeToString,
            Worker__pb2.Series.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def min(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerAPI/min',
            Worker__pb2.Axis.SerializeToString,
            Worker__pb2.Series.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
